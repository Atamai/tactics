/*=========================================================================
  Program: Cerebra
  Module:  vtkDataManager.cxx

  Copyright (c) 2011-2013 Qian Lu, David Gobbi
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:

  * Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

  * Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

  * Neither the name of the Calgary Image Processing and Analysis Centre
    (CIPAC), the University of Calgary, nor the names of any authors nor
    contributors may be used to endorse or promote products derived from
    this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
=========================================================================*/

#include "vtkDataManager.h"
#include "vtkDataNode.h"
#include "vtkImageNode.h"
#include "vtkSurfaceNode.h"

#include <vtkObjectFactory.h>
#include <vtkSmartPointer.h>

#include <vector>
#include <utility>
#include <iostream>

/* Header files for thread-safe modification of variables */
#if defined(__APPLE__)
#include <libkern/OSAtomic.h>
#elif defined(WIN32) || defined(_WIN32)
#include <vtkWindows.h>
#endif

// New macro for every VTK object
vtkStandardNewMacro(vtkDataManager);

//--------------------------------------------------------------------------

// This increments every time a new key is created
volatile long long vtkDataManager::Key::IdCounter = 0;

// The key class for doing lookups
vtkDataManager::Key::Key()
{
  /* When a new key is created, a unique Id is generated by
   * incrementing the static variable IdCounter.  Just in
   * case keys are created from multiple threads, we must use
   * thread-safe operations for incrementing IdCounter. */

#if defined(__APPLE__)
  this->Id = OSAtomicIncrement64Barrier(&this->IdCounter);
#elif defined(WIN32) || defined(_WIN32)
  this->Id = InterlockedIncrement((volatile LONG *)&this->IdCounter);
#elif defined(__clang__) || defined(__GNUC__)
  this->Id = __sync_add_and_fetch(&this->IdCounter, 1);
#else
#error "cannot implement thread-safe increment on this system"
  this->Id = ++(this->IdCounter);
#endif

  this->ObjectId = 0;
}

vtkDataManager::Key::Key(vtkObjectBase *obj)
{
  this->Id = 0;
  this->ObjectId = obj;
  obj->Register(0);
}

vtkDataManager::Key::Key(const Key& other)
{
  this->Id = other.Id;
  this->ObjectId = other.ObjectId;
  if (this->ObjectId)
    {
    this->ObjectId->Register(0);
    }
}

vtkDataManager::Key::~Key()
{
  if (this->ObjectId)
    {
    this->ObjectId->Delete();
    }
}

vtkDataManager::Key &vtkDataManager::Key::operator=(
  const vtkDataManager::Key &other)
{
  this->Id = other.Id;
  if (this->ObjectId)
    {
    this->ObjectId->Delete();
    }
  this->ObjectId = other.ObjectId;
  if (this->ObjectId)
    {
    this->ObjectId->Register(0);
    }

  return *this;
}

//--------------------------------------------------------------------------

// An Element is just a std::pair of smart pointers
// (smart pointers provide automatic reference counting)
class vtkDataManager::Element :
  public std::pair<vtkDataManager::Key,
                   vtkSmartPointer<vtkDataNode> >
{
public:
  Element(const vtkDataManager::Key& key, vtkDataNode *node) :
    std::pair<vtkDataManager::Key,
              vtkSmartPointer<vtkDataNode> >(key, node) {};
};

// A Container is just a vector (there are only going to be a
// few data sets, so a map would give little advantage here)
class vtkDataManager::Container :
  public std::vector<vtkDataManager::Element>
{
};

//--------------------------------------------------------------------------

// Constructor
vtkDataManager::vtkDataManager()
{
  this->Contents = new Container;
}

// Destructor
vtkDataManager::~vtkDataManager()
{
  delete this->Contents;
}

// Add a new data node
void vtkDataManager::AddDataNode(vtkDataNode *node, const UniqueKey& key)
{
  Container::iterator iter = this->Contents->begin();
  Container::iterator iend = this->Contents->end();

  // if there is already an entry, then replace it
  for (; iter != iend; ++iter)
    {
    if (iter->first == key)
      {
      iter->second = node;
      break;
      }
    }

  // otherwise, add a new entry to the end of the vector
  if (iter == iend)
    {
    this->Contents->push_back(Element(key, node));
    }
}

// Find the node for a given key
vtkDataNode *vtkDataManager::FindDataNode(const UniqueKey& key)
{
  vtkDataNode *node = 0;
  Container::iterator iter = this->Contents->begin();
  Container::iterator iend = this->Contents->end();

  // look for the entry
  for (; iter != iend; ++iter)
    {
    if (iter->first == key)
      {
      node = iter->second;
      break;
      }
    }

  return node;
}

// Find the image node for a given key
vtkImageNode *vtkDataManager::FindImageNode(const UniqueKey& key)
{
  return vtkImageNode::SafeDownCast(this->FindDataNode(key));
}

// Find the surface node for a given key
vtkSurfaceNode *vtkDataManager::FindSurfaceNode(const UniqueKey& key)
{
  return vtkSurfaceNode::SafeDownCast(this->FindDataNode(key));
}

// The required PrintSelf method
void vtkDataManager::PrintSelf(ostream& os, vtkIndent indent)
{
  this->Superclass::PrintSelf(os, indent);

  Container::iterator iter = this->Contents->begin();
  Container::iterator iend = this->Contents->end();

  os << indent << "Nodes:\n";

  for (; iter != iend; ++iter)
    {
    os << indent << "    " << iter->second.GetPointer() << "\n";
    }
}
